(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{266:function(t,a,s){"use strict";s.r(a);var e=s(28),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#http-缓存"}},[t._v("HTTP 缓存")]),s("ul",[s("li",[s("a",{attrs:{href:"#缓存的资源去哪里了？"}},[t._v("缓存的资源去哪里了？")])]),s("li",[s("a",{attrs:{href:"#强缓存（cache-control、expires、pragma）"}},[t._v("强缓存（Cache-control、Expires、Pragma）")])]),s("li",[s("a",{attrs:{href:"#协商缓存"}},[t._v("协商缓存")])]),s("li",[s("a",{attrs:{href:"#浏览器缓存过程"}},[t._v("浏览器缓存过程")])]),s("li",[s("a",{attrs:{href:"#no-cache-与-no-store-的区别？"}},[t._v("no-cache 与 no-store 的区别？")])])])]),s("li",[s("a",{attrs:{href:"#dns-寻址过程"}},[t._v("DNS 寻址过程")]),s("ul",[s("li",[s("a",{attrs:{href:"#客户端-浏览器查找"}},[t._v("客户端/浏览器查找")])]),s("li",[s("a",{attrs:{href:"#迭代查找过程"}},[t._v("迭代查找过程")])])])]),s("li",[s("a",{attrs:{href:"#http1-和-http2-有什么区别？http2-的优势"}},[t._v("HTTP1 和 HTTP2 有什么区别？HTTP2 的优势")]),s("ul",[s("li",[s("a",{attrs:{href:"#http-1-存在的问题"}},[t._v("HTTP/1 存在的问题")])]),s("li",[s("a",{attrs:{href:"#http2-的新特性"}},[t._v("HTTP2 的新特性")])]),s("li",[s("a",{attrs:{href:"#http2-0-的缺点"}},[t._v("HTTP2.0 的缺点")])]),s("li",[s("a",{attrs:{href:"#http2-0的多路复用和http1-x中的长连接复用有什么区别？"}},[t._v("HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别？")])]),s("li",[s("a",{attrs:{href:"#http3"}},[t._v("HTTP3")])])])]),s("li",[s("a",{attrs:{href:"#get-post-请求传参长度有什么特点？"}},[t._v("get/post 请求传参长度有什么特点？")])]),s("li",[s("a",{attrs:{href:"#谈谈对-dns-prefetch-的理解"}},[t._v("谈谈对 dns-prefetch 的理解")]),s("ul",[s("li",[s("a",{attrs:{href:"#使用方式"}},[t._v("使用方式")])])])]),s("li",[s("a",{attrs:{href:"#web-性能优化"}},[t._v("web 性能优化")])]),s("li",[s("a",{attrs:{href:"#cdn-原理"}},[t._v("CDN 原理")]),s("ul",[s("li",[s("a",{attrs:{href:"#dns-的记录类型"}},[t._v("DNS 的记录类型")])]),s("li",[s("a",{attrs:{href:"#通过-cdn-获取缓存内容的过程"}},[t._v("通过 CDN 获取缓存内容的过程")])]),s("li",[s("a",{attrs:{href:"#cdn-优势"}},[t._v("CDN 优势")])]),s("li",[s("a",{attrs:{href:"#简要概况"}},[t._v("简要概况")])])])]),s("li",[s("a",{attrs:{href:"#跨域"}},[t._v("跨域")]),s("ul",[s("li",[s("a",{attrs:{href:"#什么是同源策略"}},[t._v("什么是同源策略")])]),s("li",[s("a",{attrs:{href:"#cors"}},[t._v("CORS")])]),s("li",[s("a",{attrs:{href:"#node-正向代理"}},[t._v("Node 正向代理")])]),s("li",[s("a",{attrs:{href:"#nginx-反向代理"}},[t._v("Nginx 反向代理")])]),s("li",[s("a",{attrs:{href:"#jsonp"}},[t._v("JSONP")])]),s("li",[s("a",{attrs:{href:"#websocket"}},[t._v("Websocket")])])])]),s("li",[s("a",{attrs:{href:"#正向代理与反向代理"}},[t._v("正向代理与反向代理")]),s("ul",[s("li",[s("a",{attrs:{href:"#了解代理"}},[t._v("了解代理")])]),s("li",[s("a",{attrs:{href:"#正向代理（多指-vpn）"}},[t._v("正向代理（多指 VPN）")])]),s("li",[s("a",{attrs:{href:"#正向代理用途"}},[t._v("正向代理用途")])]),s("li",[s("a",{attrs:{href:"#反向代理（nginx）"}},[t._v("反向代理（Nginx）")])])])]),s("li",[s("a",{attrs:{href:"#https-原理"}},[t._v("HTTPS 原理")])]),s("li",[s("a",{attrs:{href:"#options-请求的理解"}},[t._v("options 请求的理解")]),s("ul",[s("li",[s("a",{attrs:{href:"#什么是-options-请求"}},[t._v("什么是 options 请求")])]),s("li",[s("a",{attrs:{href:"#options-关键的请求头字段"}},[t._v("options 关键的请求头字段")])]),s("li",[s("a",{attrs:{href:"#options-请求优化"}},[t._v("Options 请求优化")])]),s("li",[s("a",{attrs:{href:"#总结"}},[t._v("总结")])])])]),s("li",[s("a",{attrs:{href:"#http状态码301与302的区别"}},[t._v("Http状态码301与302的区别")]),s("ul",[s("li",[s("a",{attrs:{href:"#什么是301重定向？"}},[t._v("什么是301重定向？")])]),s("li",[s("a",{attrs:{href:"#什么是302重定向？"}},[t._v("什么是302重定向？")])]),s("li",[s("a",{attrs:{href:"#区别"}},[t._v("区别")])])])]),s("li",[s("a",{attrs:{href:"#为什么-http1-1-不能实现多路复用"}},[t._v("为什么 HTTP1.1 不能实现多路复用")])]),s("li",[s("a",{attrs:{href:"#参考"}},[t._v("参考")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"http-缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[t._v("#")]),t._v(" HTTP 缓存")]),t._v(" "),s("blockquote",[s("p",[t._v("缓存的主要作用："),s("strong",[t._v("可以加快资源获取速度，提升用户体验，减少网络传输，缓解服务端的压力。")]),t._v(" 分为强缓存与协商缓存两种。"),s("strong",[t._v("强缓存不会向服务器发起请求，直接读取浏览器本地的缓存；协商缓存会向服务器发起请求。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/05/31/5RIbtYmO1ZWhB9C.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"缓存的资源去哪里了？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存的资源去哪里了？"}},[t._v("#")]),t._v(" 缓存的资源去哪里了？")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("浏览器存储了资源，它将资源存储在 memory cache 或者 disk cache 中。")])])]),t._v(" "),s("p",[s("strong",[t._v("memory cache")]),t._v("：将资源缓存到内存中，等待下次访问时不需要重新下载资源，而是直接从内存中获取。")]),t._v(" "),s("p",[s("strong",[t._v("disk cache")]),t._v("：将资源缓存到磁盘中，等待下次访问时不需要重新下载资源，而直接从磁盘中读取。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("Memory cache")]),t._v(" "),s("th",[t._v("disk cache")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("相同点")]),t._v(" "),s("td",[t._v("只能存储一些派生类资源文件")]),t._v(" "),s("td",[t._v("只能存储一些派生类资源文件")])]),t._v(" "),s("tr",[s("td",[t._v("不同点")]),t._v(" "),s("td",[t._v("退出进程时数据会被清除")]),t._v(" "),s("td",[t._v("退出进程时数据不会被清除")])]),t._v(" "),s("tr",[s("td",[t._v("存储资源")]),t._v(" "),s("td",[t._v("一般脚本、字体、图片会存在内存中")]),t._v(" "),s("td",[t._v("一般非脚本会存在内存当中，如css等")])])])]),t._v(" "),s("ul",[s("li",[t._v("先在内存中查找，若有直接加载")]),t._v(" "),s("li",[t._v("若内存中不存在，则在硬盘中查找，若有直接加载")]),t._v(" "),s("li",[t._v("若硬盘中也没有，进行网络请求")]),t._v(" "),s("li",[t._v("请求获取的资源缓存到硬盘和内存")])]),t._v(" "),s("h3",{attrs:{id:"强缓存（cache-control、expires、pragma）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存（cache-control、expires、pragma）"}},[t._v("#")]),t._v(" 强缓存（Cache-control、Expires、Pragma）")]),t._v(" "),s("p",[s("strong",[t._v("优先级："),s("code",[t._v("pragma")]),t._v(" > "),s("code",[t._v("cache-control")]),t._v(" > "),s("code",[t._v("expires")])]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"expires"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),s("p",[t._v("Expires 的值是一个绝对时间，在浏览器发起请求时，会根据系统时间和 Expires 的值进行比较，若系统时间超过了 Expires 的值，缓存失效。"),s("strong",[t._v("当用户主动修改客户端时间时，会导致缓存有效期不准的问题。")])]),t._v(" "),s("h4",{attrs:{id:"cache-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),s("p",[t._v("Cache-Control 是 HTTP/1.1 中新增的属性，在请求头和响应头中都可以使用，常见的属性值有：")]),t._v(" "),s("ul",[s("li",[t._v("Max-age：单位为秒，"),s("strong",[t._v("缓存时间计算的方式是距离发起的时间的秒数，超过间隔的秒数缓存失效")])]),t._v(" "),s("li",[t._v("no-cache："),s("strong",[t._v("不使用强缓存，需要与服务器验证缓存是否新鲜。若文件没变化，服务器只告诉浏览器继续使用缓存（304）。")])]),t._v(" "),s("li",[t._v("no-store："),s("strong",[t._v("禁止使用缓存（包括协商缓存），每次都向服务器请求最新的资源")])]),t._v(" "),s("li",[t._v("private："),s("strong",[t._v("专用于个人的缓存，中间代理、CDN 等不能缓存此响应")])]),t._v(" "),s("li",[t._v("public："),s("strong",[t._v("响应可以被中间代理、CDN 等缓存")])]),t._v(" "),s("li",[t._v("must-revalidate："),s("strong",[t._v("在缓存过期前可以使用，过期后必须向服务器验证")])])]),t._v(" "),s("h4",{attrs:{id:"pragma"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pragma"}},[t._v("#")]),t._v(" Pragma")]),t._v(" "),s("p",[s("strong",[t._v("Pragma 只有一个属性值，就是 "),s("code",[t._v("no-cache")]),t._v("，效果和 Cache-Control 中的 "),s("code",[t._v("no-cache")]),t._v(" 一致，不使用强缓存，需要与服务器验证缓存是否新鲜，在3个头部属性中的优先级最高。")])]),t._v(" "),s("h3",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),s("blockquote",[s("p",[t._v("当浏览器的强缓存失效时或者请求头中设置了不走强缓存，并且在请求头中设置了 "),s("code",[t._v("If-Modified-Since")]),t._v(" 或者 "),s("code",[t._v("If-None-Match")]),t._v(" 时，会将这两个属性值发送到服务端去验证是否命中协商缓存。"),s("strong",[t._v("若命中协商缓存，服务器直接返回  304 状态码，不会返回新资源。若未命中协商缓存，服务器返回 200 状态码，且返回新资源，同时更新 "),s("code",[t._v("If-Modified")]),t._v(" 和 "),s("code",[t._v("Etag")]),t._v(" 的值。")])])]),t._v(" "),s("h4",{attrs:{id:"etag-if-none-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[t._v("#")]),t._v(" ETag/If-None-Match")]),t._v(" "),s("p",[s("strong",[t._v("ETag/If-None-Match 的值是一串 hash 码，代表的是一个资源的标识符，当服务端的文件变化的时候，它的 hash 码会随之变化。通过请求头中的 "),s("code",[t._v("If-None-Match")]),t._v(" 和当前文件的 hash 值进行比较，若相等则表示命中协商缓存。")])]),t._v(" "),s("h4",{attrs:{id:"last-modified-if-modified-since"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[t._v("#")]),t._v(" Last-Modified/If-Modified-Since")]),t._v(" "),s("p",[s("strong",[t._v("Last-Modified/If-Modified-Since 的值代表的是文件的最后修改时间。")])]),t._v(" "),s("h4",{attrs:{id:"last-modified-存在的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-存在的问题"}},[t._v("#")]),t._v(" Last-Modified 存在的问题")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Last-Modified 过期时间只能精确到秒。")])])]),t._v(" "),s("p",[t._v("精确到秒会存在两个问题（以静态资源 a.js 为例）：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("若 a.js 在一秒时间内经常变动，同时服务器给 a.js 设置无强缓存，那浏览器每次访问 a.js 都会去请求服务器，此时服务器比较发给浏览器的上次修改时间和 a.js 的最近修改时间，发现都是在同一个时间（因为精确到秒），因此返回给浏览器继续使用本地缓存的资源（304），但事实上服务器上的 a.js 已经改动了很多次。这种情况下，浏览器拿不到最新的 a.js 文件。")])]),t._v(" "),s("li",[s("strong",[t._v("如果在服务器上 a.js 被修改了，但其实际内容根本没发生改变，会因为 Last-Modified 时间匹配不上而重新返回 a.js 给浏览器。")])])]),t._v(" "),s("h3",{attrs:{id:"浏览器缓存过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存过程"}},[t._v("#")]),t._v(" 浏览器缓存过程")]),t._v(" "),s("ul",[s("li",[t._v("浏览器第一次加载资源，服务器返回200，浏览器将资源文件从服务器上请求下载下来，并把响应头中的 Cache-Control、Expires、Last-Modified、Etag 一并缓存。")]),t._v(" "),s("li",[t._v("下一次加载资源时，先比较当前时间和上一次请求返回200的时间差。如果没超过 Cache-Control 设置的 max-age，则没有过期，命中强缓存，不发请求直接从本地缓存读取该文件（如果浏览器不支持HTTP1.1，则用 Expires 判断是否过期）。")]),t._v(" "),s("li",[t._v("若时间过期，则向服务器发送请求，同时请求头中带有 If-Modified-Since 和 If-None-Match。")]),t._v(" "),s("li",[t._v("服务器收到请求后，优先根据 Etag 的值判断被请求的文件是否有被修改，Etag 值一致则没有修改，命中协商缓存，返回304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回200.")]),t._v(" "),s("li",[t._v("如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回304；不一致则返回新的 Last-Modified 和文件并返回200。")])]),t._v(" "),s("h3",{attrs:{id:"no-cache-与-no-store-的区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#no-cache-与-no-store-的区别？"}},[t._v("#")]),t._v(" no-cache 与 no-store 的区别？")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("no-cache")]),t._v(" 和 "),s("code",[t._v("no-store")]),t._v(" 都是 HTTP 协议头 "),s("code",[t._v("Cache-Control")]),t._v(" 的值。")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("no-cache")]),t._v("："),s("strong",[t._v("在浏览器使用缓存前，会往返对比 ETag。若 ETag 没变，返回304使用缓存。")])]),t._v(" "),s("li",[s("code",[t._v("no-store")]),t._v("："),s("strong",[t._v("彻底禁用缓存（浏览器不缓存内容），所有内容都不会被缓存到缓存或临时文件中。")])]),t._v(" "),s("li",[s("code",[t._v("public")]),t._v("："),s("strong",[t._v("所有内容都将被缓存（客户端和代理服务器都可缓存）")])]),t._v(" "),s("li",[s("code",[t._v("private")]),t._v("："),s("strong",[t._v("内容只缓存到私有缓存中（仅客户端可缓存，代理服务器不可缓存）")])]),t._v(" "),s("li",[s("code",[t._v("max-age=xxx")]),t._v("："),s("strong",[t._v("缓存的内容将在 xxx 秒后失败，此选项只在 HTTP1.1 可用。如果和 "),s("code",[t._v("Last-Modified")]),t._v(" 一起使用，优先级较高。")])])]),t._v(" "),s("h2",{attrs:{id:"dns-寻址过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-寻址过程"}},[t._v("#")]),t._v(" DNS 寻址过程")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("DNS 的域名查找：在客户端和浏览器，本地 DNS 之间的查询方式是递归查询；在本地DNS服务器与根域及其子域之间的查询方式是迭代查询。")])])]),t._v(" "),s("h3",{attrs:{id:"客户端-浏览器查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端-浏览器查找"}},[t._v("#")]),t._v(" 客户端/浏览器查找")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/05/31/LoAkFcIZynU3GE9.png",alt:"递归过程"}})]),t._v(" "),s("p",[s("strong",[t._v("在客户端输入 URL 后，会有一个递归查询的过程：从浏览器缓存中查找 --\x3e 本地的hosts文件查找 --\x3e 找本地DNS解析器缓存查找 --\x3e 本地DNS服务器查找。")])]),t._v(" "),s("h3",{attrs:{id:"迭代查找过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代查找过程"}},[t._v("#")]),t._v(" 迭代查找过程")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/05/31/6OfAtlVwyrCvczH.png",alt:"迭代查找过程"}})]),t._v(" "),s("ul",[s("li",[t._v("本地 DNS 服务器向 根域名 DNS 服务器发起查询，根域名 DNS 服务器返回顶级域 DNS 服务器的 IP 地址")]),t._v(" "),s("li",[t._v("本地 DNS 服务器向 顶级域 DNS 服务器发起查询，顶级域 DNS 服务器返回权威 DNS 服务器的 IP 地址")]),t._v(" "),s("li",[t._v("本地 DNS 服务器向 权威 DNS 服务器发起查询，权威 DNS 服务器返回相应主机的 IP 地址。")])]),t._v(" "),s("h2",{attrs:{id:"http1-和-http2-有什么区别？http2-的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-和-http2-有什么区别？http2-的优势"}},[t._v("#")]),t._v(" HTTP1 和 HTTP2 有什么区别？HTTP2 的优势")]),t._v(" "),s("h3",{attrs:{id:"http-1-存在的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-存在的问题"}},[t._v("#")]),t._v(" HTTP/1 存在的问题")]),t._v(" "),s("p",[s("strong",[t._v("HTTP1.x 存在最大的问题就是：线头阻塞（Head of line blocking）。")])]),t._v(" "),s("h3",{attrs:{id:"http2-的新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-的新特性"}},[t._v("#")]),t._v(" HTTP2 的新特性")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("首部压缩（Header Compression）")]),t._v("：HTTP1.x 的 header 带有大量信息，而且每次都要重复发送，"),s("strong",[t._v("HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 header fields 表，既避免了重复 header 的传输，又减小了需要传输的大小。")])]),t._v(" "),s("li",[s("strong",[t._v("服务端推送（server push）")]),t._v("："),s("strong",[t._v("服务端推送是一种在客户端请求之前发送数据的机制。在 HTTP/2 中，服务器可以对客户端的一个请求发送多个响应。若一个请求是由你的主页发起的，服务器很可能会响应主页内容、logo以及样式表，因为它知道客户端会用到这些东西。这相当于在一个 HTML 文档内集合了所有的资源。服务器推送还有一个很大的优势：可以缓存！也让在遵循同源的情况下，不同页面之间可以共享缓存资源成为可能。")])]),t._v(" "),s("li",[s("strong",[t._v("多路复用（MultiPlexing）")]),t._v("：即连接共享，每一个 request 都是用作连接共享机制的。一个 request 对应一个 id，这样一个连接上可以有多个 request，每个连接的 request 可以随机的混杂在一起，接收方可以根据 request 的 id 将 request 再归属到各自不同的服务端请求里面。"),s("strong",[t._v("HTTP/2 可以实现多流并行而不用依赖建立多个 TCP 连接，HTTP/2 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。")])]),t._v(" "),s("li",[s("strong",[t._v("新的二进制格式（Binary Format）")]),t._v("："),s("strong",[t._v("HTTP1.x 的解析是基于文本，基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多；二进制不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/05/24/JVfExGo8Z3Pb9va.png",alt:"HTTP/2.0 多路复用"}})]),t._v(" "),s("h3",{attrs:{id:"http2-0-的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-0-的缺点"}},[t._v("#")]),t._v(" HTTP2.0 的缺点")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("TCP 以及 TCP+TLS 建立连接的延时。")]),t._v(" HTTP/2 使用 TCP 协议来传输的，如果使用 HTTPS 的话，还需要使用 TLS      协议进行安全传输，而使用 TLS 也需要一个握手过程，在传输数据之前，导致需要花费 3~4 个RTT。")]),t._v(" "),s("li",[s("strong",[t._v("TCP 的队头阻塞并没有彻底解决。 在 HTTP/2 中，多个请求是跑在一个 TCP 管道中的。但当 HTTP/2 出现丢包时，整个 TCP 都要开始等待重传，此时就会阻塞该 TCP 连接中的所有请求。")])])]),t._v(" "),s("h3",{attrs:{id:"http2-0的多路复用和http1-x中的长连接复用有什么区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-0的多路复用和http1-x中的长连接复用有什么区别？"}},[t._v("#")]),t._v(" HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别？")]),t._v(" "),s("ul",[s("li",[s("em",[s("em",[t._v("HTTP/1.")]),t._v(" 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个 TCP 连接")]),t._v("*")]),t._v(" "),s("li",[s("strong",[t._v("HTTP/1.1 "),s("code",[t._v("Pipeling")]),t._v(" 解决方式为：若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获取执行机会，一旦有某个请求超时，后续请求只能被阻塞，这就是常说的线头阻塞。")])]),t._v(" "),s("li",[s("strong",[t._v("HTTP/2.0 多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行。")])])]),t._v(" "),s("h3",{attrs:{id:"http3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http3"}},[t._v("#")]),t._v(" HTTP3")]),t._v(" "),s("blockquote",[s("p",[t._v("一个基于 UDP 协议的 QUIC 协议，让 HTTP 跑在QUIC上而不是TCP上。")])]),t._v(" "),s("ul",[s("li",[t._v("实现了类似TCP的流量控制、传输可靠性的功能。虽然UDP不提供可靠性的传输，但QUIC在UDP的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些TCP中存在的特性。")]),t._v(" "),s("li",[t._v("实现了快速握手功能。由于QUIC是基于UDP的，所以QUIC可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着QUIC可以用最快的速度来发送和接收数据。")]),t._v(" "),s("li",[t._v("集成了TLS加密功能。QUIC使用的是TLS1.3，相较于早期版本TLS1.3有更多的优点，其中最重要的一点是减少了握手所花费的RTT个数。")]),t._v(" "),s("li",[t._v("多路复用，彻底解决了TCP中队头阻塞的问题。")])]),t._v(" "),s("h2",{attrs:{id:"get-post-请求传参长度有什么特点？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-post-请求传参长度有什么特点？"}},[t._v("#")]),t._v(" get/post 请求传参长度有什么特点？")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("经常说get请求参数的大小存在限制，而post请求的参数大小是无限制的。这是一个错误的说法，实际上HTTP协议从未规定 GET/POST 的请求长度限制是多少。对get请求参数的限制是来源于浏览器或web服务器，浏览器或web服务器限制了url长度。")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("HTTP 协议未规定 GET 和 POST 的长度限制")])]),t._v(" "),s("li",[s("strong",[t._v("GET 的最大长度显示是因为浏览器和web服务器限制了URI的长度")])]),t._v(" "),s("li",[s("strong",[t._v("不同的浏览器和WEB服务器，限制的最大长度不一样")])]),t._v(" "),s("li",[t._v("要支持IE，则最大长度为2083byte，若只支持Chrome，则最大长度8182byte")])]),t._v(" "),s("h2",{attrs:{id:"谈谈对-dns-prefetch-的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对-dns-prefetch-的理解"}},[t._v("#")]),t._v(" 谈谈对 dns-prefetch 的理解")]),t._v(" "),s("blockquote",[s("p",[t._v("DNS Prefetching："),s("strong",[t._v("浏览器根据自定义的规则，提前去解析后面可能用到的域名，来加速网站的访问速度。简单讲即提前解析域名，以免延迟。")])])]),t._v(" "),s("h3",{attrs:{id:"使用方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//wq.test.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("此功能有个默认加载条件，所有的 "),s("code",[t._v("a")]),t._v(" 标签的 "),s("code",[t._v("href")]),t._v(" 都会自动去启用 DNS Prefetching。即网页中的 "),s("code",[t._v("a")]),t._v(" 标签 "),s("code",[t._v("href")]),t._v(" 带的域名是不需要在 "),s("code",[t._v("head")]),t._v(" 里面加上 "),s("code",[t._v("link")]),t._v(" 手动设置的。但 "),s("code",[t._v("a")]),t._v(" 标签的默认启动在 HTTPS 中不起作用。")])]),t._v(" "),s("p",[s("strong",[t._v("要使用 "),s("code",[t._v("meta")]),t._v(" 中的 "),s("code",[t._v("http-equiv")]),t._v(" 来强制启动功能。")])]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x-dns-prefetch-control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("总结：")])]),t._v(" "),s("ul",[s("li",[t._v("DNS Prefetching 是提前加载域名解析的，省去了解析时间。"),s("code",[t._v("a")]),t._v(" 标签的 "),s("code",[t._v("href")]),t._v(" 可以在 chrome、firefox 包括高版本的IE浏览器中默认开启，但是在 HTTPS 下不起作用，需要通过 "),s("code",[t._v("meta")]),t._v(" 来强制开启功能。")]),t._v(" "),s("li",[s("strong",[t._v("这是 DNS 的提前解析，并不是 css，js 之类的文件缓存，不要混淆了两个不同的概念。")])]),t._v(" "),s("li",[t._v("若直接做了 "),s("code",[t._v("js")]),t._v(" 的重定向，或者在服务端做了重定向，没有在 "),s("code",[t._v("link")]),t._v(" 里面手动设置，是不起作用的。")]),t._v(" "),s("li",[s("strong",[t._v("有利于什么样的网站呢？类似于 taobao 这种网站，网页中引用了大量其他域名的资源。若网站中的所有资源都在网站本域名下，那么这个基本没什么用。因为在进行 DNS 解析的时候，浏览器就帮忙缓存了域名所对应的 IP 信息了。")])])]),t._v(" "),s("h2",{attrs:{id:"web-性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-性能优化"}},[t._v("#")]),t._v(" web 性能优化")]),t._v(" "),s("h2",{attrs:{id:"cdn-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cdn-原理"}},[t._v("#")]),t._v(" CDN 原理")]),t._v(" "),s("blockquote",[s("p",[t._v("CDN（Content Delivery Network 内容分发网络）："),s("strong",[t._v('将源站的内容发布到接近用户的网络"边缘"，用户可以就近获取所需数据，不仅降低了网络的拥塞状况、提高请求的响应速度，也能够减少源站的负载压力。')])])]),t._v(" "),s("h3",{attrs:{id:"dns-的记录类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-的记录类型"}},[t._v("#")]),t._v(" DNS 的记录类型")]),t._v(" "),s("blockquote",[s("p",[t._v("在 DNS 系统中，最常见的资源记录方式是 Internet 类记录，该记录由包含4个字段的数据构成：Name，Value，Type，TTL。其中 Name 和 Value 可以理解为一对键值对，但其具体含义取决于 Type 的类型。TTL 记录了该条记录应当从缓存中删除的时间。")])]),t._v(" "),s("p",[t._v("在资源记录的类型中，最为常见且重要的类型 Type 主要有：")]),t._v(" "),s("ul",[s("li",[t._v("A记录（Address）："),s("strong",[t._v("A记录用于描述目标域名到IP地址的映射关系，将目标域名与A记录的Name字段进行匹配，将成功匹配的记录的Value字段的内容（IP地址）输出到DNS回应报文中。")])]),t._v(" "),s("li",[t._v("NS记录（Name Server）："),s("strong",[t._v("NS记录用于描述目标域名到负责解析该域名的DNS的映射关系。根据目标域名对NS记录的Name字段进行匹配，将成功匹配的记录的Value字段（负责解析目标域名的DNS的IP地址）输出到DNS回应报文中。")])]),t._v(" "),s("li",[t._v("CNAME记录："),s("strong",[t._v("CNAME记录用于描述目的域名和别名的对应关系，如果说A记录可以将目标域名转换为对应主机的IP地址，那么CNAME记录则可以将一个域名（别名）转换为另一个域名。若多条CNAME记录指向同一个域名，则可以将多个不同的域名的请求指向同一台服务器主机。并且，CNAME记录通常还对应了一条A记录，用于提供被转换的域名的IP地址。")])])]),t._v(" "),s("h3",{attrs:{id:"通过-cdn-获取缓存内容的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-cdn-获取缓存内容的过程"}},[t._v("#")]),t._v(" 通过 CDN 获取缓存内容的过程")]),t._v(" "),s("blockquote",[s("p",[t._v("CDN 将用户对源站的请求导向了距离用户较近的缓存节点，而非源站。")])]),t._v(" "),s("p",[s("strong",[t._v("在 DNS 解析域名时新增了一个 "),s("code",[t._v("全局负载均衡系统（GSLB）")]),t._v("，GSLB 的主要功能是根据用户的本地 DNS 的 IP 地址判断用户的位置，筛选出距离用户较近的 "),s("code",[t._v("本地负载均衡系统(SLB)")]),t._v("，并将该 SLB 的 IP 地址作为结果返回给本地 DNS。SLB 主要负责判断 "),s("code",[t._v("缓存服务器集群")]),t._v(" 中是否包含用户请求的资源数据。若缓存服务器中存在请求的资源，则根据缓存服务器集群中节点的健康程度、负载量、连接数等因素筛选出最优的缓存节点，并将 HTTP 请求重定向到最优的缓存节点上。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/01/Fnh9HNXKCIwTZ82.png",alt:"CDN 获取缓存内容过程"}})]),t._v(" "),s("p",[t._v("以客户端发起对 "),s("code",[t._v('"join.qq.com/video.php"')]),t._v(" 的HTTP请求为例：")]),t._v(" "),s("ul",[s("li",[t._v("用户发起对 "),s("code",[t._v('"join.qq.com/video.php"')]),t._v(" 的 HTTP 请求，首先需要本地 DNS 通过递归查询的方式获取域名 "),s("code",[t._v('"join.qq.com"')]),t._v(" 的 IP 地址；")]),t._v(" "),s("li",[t._v("若本地 DNS 的缓存中没有该域名的记录，则向 "),s("code",[t._v("根 DNS")]),t._v(" 发起 DNS 查询报文；")]),t._v(" "),s("li",[s("code",[t._v("根 DNS")]),t._v(" 发现域名的前缀为 "),s("code",[t._v("com")]),t._v("，则给出负责解析 "),s("code",[t._v("com")]),t._v(" 的 "),s("code",[t._v("顶级 DNS")]),t._v(" 的 IP 地址；")]),t._v(" "),s("li",[t._v("本地 DNS 向 "),s("code",[t._v("顶级 DNS")]),t._v(" 发送  DNS 查询报文；")]),t._v(" "),s("li",[s("code",[t._v("顶级 DNS")]),t._v(" 发现域名的前缀为 "),s("code",[t._v("qq.com")]),t._v("，在本地记录中查找负责该前缀的 "),s("code",[t._v("权威 DNS")]),t._v(" 的 IP 地址并进行回复；")]),t._v(" "),s("li",[t._v("本地 DNS 向 "),s("code",[t._v("权威 DNS")]),t._v(" 发送 DNS 查询报文；")]),t._v(" "),s("li",[s("code",[t._v("权威 DNS")]),t._v(" 查找到一条 NAME 字段为 "),s("code",[t._v('"join.qq.com"')]),t._v(" 的 "),s("code",[t._v("CNAME 记录（由服务提供者配置）")]),t._v("，该记录的 Value  字段为 "),s("code",[t._v('"join.qq.cdn.com"')]),t._v("；并且还找到另一条 NAME 字段为 "),s("code",[t._v('"join.qq.cdn.com"')]),t._v("的 A 记录，该记录的Value字段为 GSLB 的 IP 地址；")]),t._v(" "),s("li",[t._v("本地 DNS 向 GSLB 发送 DNS 查询报文；")]),t._v(" "),s("li",[s("strong",[t._v("GSLB 根据 "),s("code",[t._v("本地 DNS")]),t._v(" 的 IP 地址判断用户的大致位置为深圳，筛选出位于华南地区且综合考量最优的 SLB 的 IP 地址填入 DNS 回应报文，作为 DNS 查询的最终结果；")])]),t._v(" "),s("li",[t._v("本地 DNS 回复客户端的 DNS 请求，将上一步的 IP 地址作为最终结果回复给客户端；")]),t._v(" "),s("li",[s("strong",[t._v("客户端根据 IP 地址向 SLB 发起 HTTP 请求："),s("code",[t._v('"join.qq.com/video.php"')])]),t._v("；")]),t._v(" "),s("li",[s("strong",[t._v("SLB 综合考虑缓存服务器集群中各个节点的资源限制条件、健康度、负载情况等因素，筛选出最优的缓存节点后回应客户端的 HTTP 请求（状态码为 302，重定向地址为最优缓存节点的 IP 地址）")]),t._v("；")]),t._v(" "),s("li",[t._v("客户端接收到 SLB 的 HTTP 回复后，重定向到缓存节点上；")]),t._v(" "),s("li",[s("strong",[t._v("缓存节点判断请求的资源是否存在、过期，将缓存的资源直接回复给客户端，否则到源站进行数据更新再回复。")])])]),t._v(" "),s("p",[t._v("关键步骤为 6~9，与普通的 DNS 过程不同点是："),s("strong",[t._v('需要服务提供者（源站）配置它在其权威 DNS 中的记录，将直接指向源站的 A记录修改为一条 CNAME 记录及其对应的 A记录，CNAME 记录将目标域名转换为 GSLB 的别名，A记录又将该别名转换为 GSLB 的 IP 地址。通过这一系列的操作，将解析源站的目标域名的权力交给了 GSLB，以致于 GSLB 可以根据地理位置等信息将用户的请求引导至距离其最近的 "缓存节点"，减缓了源站的负载压力和网络拥塞。')])]),t._v(" "),s("p",[t._v("以上介绍了目前 CDN 中最为常见的工作方式，"),s("strong",[t._v("利用 CNAME 将域名和目标 IP 之间进行解耦，将目标 IP 的解析权下放到 GSLB 中，方便实现更多自定义的功能，是一种更加灵活的方式。")])]),t._v(" "),s("h3",{attrs:{id:"cdn-优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cdn-优势"}},[t._v("#")]),t._v(" CDN 优势")]),t._v(" "),s("ul",[s("li",[t._v("CDN 节点解决了跨运营商和跨地域访问的问题，访问延时大大降低。")]),t._v(" "),s("li",[s("strong",[t._v("大部分请求在 CDN 边缘节点完成，CDN 起到了分流作用，减轻了源服务器的负载。")])])]),t._v(" "),s("h3",{attrs:{id:"简要概况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简要概况"}},[t._v("#")]),t._v(" 简要概况")]),t._v(" "),s("p",[s("strong",[t._v("CDN 网络本质是在用户和服务器之间增加 "),s("code",[t._v("Cache")]),t._v(" 层，将用户的访问请求引导到 "),s("code",[t._v("Cache")]),t._v(" 节点而不是服务器源站点，主要是通过接管 DNS 来实现这一目的的。")])]),t._v(" "),s("h2",{attrs:{id:"跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),s("h3",{attrs:{id:"什么是同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是同源策略"}},[t._v("#")]),t._v(" 什么是同源策略")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("同源策略是一个安全策略。所谓同源指的是 协议、域名、端口相同。浏览器出于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，在没有明确授权的情况下，不能读写对方的资源。")])])]),t._v(" "),s("p",[s("strong",[t._v("同源策略限制的内容有：")])]),t._v(" "),s("ul",[s("li",[t._v("Cookie，LocalStorage，IndexedDB 等存储性内容；")]),t._v(" "),s("li",[t._v("DOM 节点")]),t._v(" "),s("li",[t._v("AJAX 请求发送后，非同源会被浏览器拦截")]),t._v(" "),s("li",[s("strong",[t._v("有三个标签是允许跨域加载资源："),s("code",[t._v('<img src="xxx">')]),t._v("，"),s("code",[t._v('<link src="xxx">')]),t._v("，"),s("code",[t._v('<script src="xxx">')])])])]),t._v(" "),s("p",[s("strong",[t._v("需特别注意：")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("若是协议和端口造成的跨域问题，前端是无能为力的")])]),t._v(" "),s("li",[s("strong",[t._v('在跨域问题上，仅仅是通过 URL的首部 来识别而不会根据域名对应的 IP地址 是否相同来判断。（URL 首部 可以理解为 "协议、域名、端口必须匹配"）')])]),t._v(" "),s("li",[s("strong",[t._v("请求跨域了，到底发出去没有？跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。")])])]),t._v(" "),s("h3",{attrs:{id:"cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),s("blockquote",[s("p",[t._v("CORS 需要浏览器和后端同时支持。浏览器会自动进行 CORS 通信，实现 CORS")])]),t._v(" "),s("h4",{attrs:{id:"简单请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),s("blockquote",[s("p",[t._v("不会触发 CORS 预检请求")])]),t._v(" "),s("ul",[s("li",[t._v("请求方法为 "),s("code",[t._v("GET、HEAD、POST")]),t._v(" 时发的请求")]),t._v(" "),s("li",[t._v("人为设置了规范集合之内的首部字段，如："),s("code",[t._v("Accept/Accept-Language/Content-Language/Content-Type/DPR/Downlink/Save-Data/Viewport-Width/Width")])]),t._v(" "),s("li",[s("code",[t._v("Content-Type")]),t._v(" 的值仅限于下列三者之一，即 "),s("code",[t._v("application/x-www-form-urlencoded、multipart/form-data、text/plain")])]),t._v(" "),s("li",[t._v("请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器")]),t._v(" "),s("li",[t._v("请求中没有使用 ReadableStream 对象。")])]),t._v(" "),s("h4",{attrs:{id:"复杂请求（非简单请求）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂请求（非简单请求）"}},[t._v("#")]),t._v(" 复杂请求（非简单请求）")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。")])])]),t._v(" "),s("p",[s("strong",[t._v("需预检的请求要求必须首先使用 "),s("code",[t._v("OPTIONS")]),t._v(" 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。预检请求的使用：可以避免跨域请求对服务器的用户数据产生未预期的影响。")])]),t._v(" "),s("h4",{attrs:{id:"请求附带身份凭证-cookies"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求附带身份凭证-cookies"}},[t._v("#")]),t._v(" 请求附带身份凭证 ---\x3e cookies")]),t._v(" "),s("p",[s("strong",[t._v("若发起请求时设置 "),s("code",[t._v("withCredentials")]),t._v(" 标志设置为 "),s("code",[t._v("true")]),t._v("，从而向服务器发送 cookie。但是如果服务器端的响应中未携带 "),s("code",[t._v("Access-Control-Allow-Credentials: true")]),t._v("，浏览器将不会把响应内容返回给请求的发送者。")])]),t._v(" "),s("p",[s("strong",[t._v("对于附带身份凭证的请求，服务器不得设置 "),s("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 的值为 "),s("code",[t._v("*")]),t._v("，必须是某个具体的域名。")])]),t._v(" "),s("p",[t._v("注意，简单 GET 请求不会被预检；若对此类带有身份凭证请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。")]),t._v(" "),s("h3",{attrs:{id:"node-正向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-正向代理"}},[t._v("#")]),t._v(" Node 正向代理")]),t._v(" "),s("blockquote",[s("p",[t._v("代理的思路为："),s("strong",[t._v("同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求则无需遵循同源策略。")])])]),t._v(" "),s("p",[t._v("脚手架实现跨域原理："),s("strong",[t._v("都有着共同的底层包 "),s("a",{attrs:{href:"https://github.com/chimurai/http-proxy-middleware",target:"_blank",rel:"noopener noreferrer"}},[t._v("http-proxy-middleware"),s("OutboundLink")],1),t._v("（"),s("a",{attrs:{href:"https://github.com/hua1995116/proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("http-proxy-middleware 原理"),s("OutboundLink")],1),t._v("）")])]),t._v(" "),s("ul",[s("li",[t._v("接受客户端请求")]),t._v(" "),s("li",[s("strong",[t._v("代理服务器将请求转发给服务器")])]),t._v(" "),s("li",[t._v("拿到服务器响应数据")]),t._v(" "),s("li",[t._v("将响应转发给客户端")])]),t._v(" "),s("h3",{attrs:{id:"nginx-反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-反向代理"}},[t._v("#")]),t._v(" Nginx 反向代理")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("通过反向代理的方式，在众多解决跨域方式中都不可避免的需要服务端支持，使用 Nginx 可以纯前端解决请求跨域的问题。")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("server\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3002")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  server_name localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  location "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    proxy_pass http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("localhost"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    # 指定允许跨域的方法，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 代表所有\n    add_header Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Methods "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    # 预检命令的缓存，如果不缓存每次会发送两次请求\n    add_header Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Max"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Age "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    # 带cookie请求需要加上这个字段，并设置为 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    add_header Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Credentials "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    # 表示允许这个域跨域调用（客户端发送请求的域名和端口）\n    # $http_origin 动态获取请求客户端请求的域   不用 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 的原因是带 cookie 的请求不支持 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 号\n    add_header Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Origin $http_origin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    # 表示请求头的字段 动态获取\n    add_header Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers\n    $http_access_control_request_headers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    # "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPTIONS")]),t._v(" 预检命令，预检命令通过时才发送请求\n    # 检查请求的类型是不是预检命令\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$request_method "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPTIONS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br")])]),s("h3",{attrs:{id:"jsonp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("JSONP")]),t._v(" 主要利用了 "),s("code",[t._v("script")]),t._v(" 标签没有跨域限制的这个特性来完成的。")])]),t._v(" "),s("h4",{attrs:{id:"使用限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用限制"}},[t._v("#")]),t._v(" 使用限制")]),t._v(" "),s("p",[s("strong",[t._v("仅支持 "),s("code",[t._v("GET")]),t._v(" 方法，若想使用完整的 REST 接口，请使用 CORS 或者其他代理方式。")])]),t._v(" "),s("h4",{attrs:{id:"流程解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程解析"}},[t._v("#")]),t._v(" 流程解析")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后端实现")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Koa "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'koa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" app "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Koa")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api/jsonp'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" cb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("cb"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" msg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前端实现")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/javascript"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("jsonpCallback")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script\n\tsrc"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8080/api/jsonp?msg=hello&cb=jsonpCallback"')]),t._v("\n\ttype"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/javascript"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h3",{attrs:{id:"websocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" Websocket")]),t._v(" "),s("blockquote",[s("p",[t._v('Websocket 规范定义了一种 API，可在网络浏览器和服务器之间建立 "套接字" 连接。'),s("strong",[t._v("客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据。这种方式本质没有使用 HTTP，因此也没有跨域的限制。")])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.html5rocks.com/zh/tutorials/websockets/basics/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Websocket 详细教程"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("WebSocket 协议本质是一个基于 TCP 的协议，为了建立一个 WebSocket 连接，客户端浏览器 首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中"),s("strong",[t._v("附加头信息 "),s("code",[t._v("Upgrade: WebSocket")]),t._v(" 表明这是一个申请协议升级的 HTTP 请求")]),t._v("，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方可以通过这个连接通道自由的传递信息，并且"),s("strong",[t._v("这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。")])]),t._v(" "),s("h2",{attrs:{id:"正向代理与反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向代理与反向代理"}},[t._v("#")]),t._v(" 正向代理与反向代理")]),t._v(" "),s("blockquote",[s("p",[t._v("两者区别在于代理的对象不一样："),s("strong",[t._v("正向代理代理的对象是客户端，反向代理代理的对象是服务端。")])])]),t._v(" "),s("h3",{attrs:{id:"了解代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解代理"}},[t._v("#")]),t._v(" 了解代理")]),t._v(" "),s("p",[t._v("**代理本质上是一个服务器，可以类比为一个中介，A 和 B 本来可以直连，中间插入一个 C，C 就是中介。**拿买房为例，买家和卖家原本可以直接交流，但如果卖家把卖房事宜委托给中介后，买家都只能先通过中介来联系卖家，再由中介转述回买家。")]),t._v(" "),s("h3",{attrs:{id:"正向代理（多指-vpn）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向代理（多指-vpn）"}},[t._v("#")]),t._v(" 正向代理（多指 VPN）")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都由代理服务器代替来请求。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/02/JGTfOviCp1kbFcE.png",alt:"正向代理"}})]),t._v(" "),s("p",[t._v("国内用户想要访问 Google 时，会被阻挡。所以此时把请求发送到另一个代理服务器（可以访问 Google 的服务器）上，由其代为转发请求和接收响应内容。")]),t._v(" "),s("p",[t._v("当出现多个请求客户端时，如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/02/aFRZHh3eYgEWCXc.png",alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("正向代理：指一对一或多对一，Server 不知道请求的 Client 都是谁。")])]),t._v(" "),s("p",[s("strong",[t._v("正向代理是一个位于客户端和原始服务器（origin server）之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。")])]),t._v(" "),s("h3",{attrs:{id:"正向代理用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向代理用途"}},[t._v("#")]),t._v(" 正向代理用途")]),t._v(" "),s("ul",[s("li",[t._v("访问原理无法访问的资源，如 Google")]),t._v(" "),s("li",[t._v("可以做缓存，加速访问资源")]),t._v(" "),s("li",[t._v("对客户端访问授权，上网进行认证")]),t._v(" "),s("li",[t._v("代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息")])]),t._v(" "),s("h3",{attrs:{id:"反向代理（nginx）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向代理（nginx）"}},[t._v("#")]),t._v(" 反向代理（Nginx）")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("反向代理隐藏了真实的服务端，当请求 "),s("code",[t._v("baidu.com")]),t._v(" 时，背后可能有成千上万台服务器为我们服务，但具体是哪一台，用户不知道也不需要知道，只需要知道反向代理服务器是谁就好了，"),s("code",[t._v("baidu.com")]),t._v(" 就是反向代理服务器，反向代理服务器会把请求转发到真实的服务器那里去。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/02/G2EfutmSOANkXg4.png",alt:"反向代理"}})]),t._v(" "),s("p",[t._v("反向代理跟正向代理相反，"),s("strong",[t._v("同时反向代理一般是负载均衡的一个原理（大部分访问量大的网站，如百度，都会做负载均衡，其中反向代理服务器起着至关重要的角色，同时反向代理服务器对应高并发的能力也必须很强）。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/02/jyBFTqk2OVCJQmE.png",alt:"反向代码"}})]),t._v(" "),s("h2",{attrs:{id:"https-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-原理"}},[t._v("#")]),t._v(" HTTPS 原理")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/08/EyMBRiSk3FgDNzU.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/08/X2QUbHI8PnmK4wC.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/08/WkhK9es3rIdTxLU.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/08/MxtdqKHQTDRXJfZ.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/06/08/YjfFnIJxrazgDLd.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"options-请求的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options-请求的理解"}},[t._v("#")]),t._v(" options 请求的理解")]),t._v(" "),s("h3",{attrs:{id:"什么是-options-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-options-请求"}},[t._v("#")]),t._v(" 什么是 options 请求")]),t._v(" "),s("blockquote",[s("p",[t._v("HTTP 的 OPTIONS 方法："),s("strong",[t._v('用于获取目的资源所支持的通信选项。客户端可以对特定的 URL 使用 OPTIONS 方法，也可以对整站（通过将 URL 设置为 "*"）使用该方法。')])])]),t._v(" "),s("p",[t._v("在跨域的情况下，在浏览器发起“复杂请求”时主动发起的。"),s("strong",[t._v("跨域共享标准规范要求：对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。")])]),t._v(" "),s("h3",{attrs:{id:"options-关键的请求头字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options-关键的请求头字段"}},[t._v("#")]),t._v(" options 关键的请求头字段")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("request header")]),t._v(" 的关键字段")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("关键字段")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Access-Control-Request-Method")]),t._v(" "),s("td",[t._v("告知服务器，实际请求将使用 POST 方法")])]),t._v(" "),s("tr",[s("td",[t._v("Access-Control-Request-Headers")]),t._v(" "),s("td",[t._v("告知服务器，实际请求将携带的自定义请求首部字段")])])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// example")]),t._v("\nAccess"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Method"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("\nAccess"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("X")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PINGOTHER")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Content"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"options-请求优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options-请求优化"}},[t._v("#")]),t._v(" Options 请求优化")]),t._v(" "),s("blockquote",[s("p",[t._v("当发起跨域请求时，若是简单请求，只会发出一次请求。但如果是复杂请求则先发出 options 请求，用于确认目标资源是否支持跨域，然后浏览器会根据服务端响应的 header 自动处理剩余的请求。若响应支持跨域，则继续发出正常请求；若不支持，则在控制台显示错误。")])]),t._v(" "),s("p",[t._v("存在的问题："),s("strong",[t._v("触发预检时，跨域请求便会发送 2 次请求，既增加了请求数，也延迟了请求真正发起的时间，严重影响性能。")])]),t._v(" "),s("p",[t._v("优化 Options 请求的两种方法：")]),t._v(" "),s("ul",[s("li",[t._v("转为简单请求，如用  JSONP 做跨域请求")]),t._v(" "),s("li",[s("strong",[t._v("对 options 请求进行缓存，服务端设置 "),s("code",[t._v("Access-Control-Max-Age")]),t._v(" 字段，当第一次请求该 URL 时会发出 OPTIONS 请求，浏览器会根据返回的 "),s("code",[t._v("Access-Control-Max-Age")]),t._v(" 字段缓存该请求的 OPTIONS 预检请求的响应结果（具体缓存时间还取决于浏览器的支持的默认最大值，取两者最小值，一般为 10 分钟）。在缓存有效期内，该资源的请求（URK 和 header 字段都相同的情况下）不会再触发预检。")])])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[s("strong",[t._v("options 请求就是预检请求，可用于检测服务器允许的 http 方法。当发起跨域请求时，由于安全原因，触发一定条件时浏览器会在正式请求之前自动先发起 OPTIONS 请求，即 CORS 预检请求，服务器若接受该跨域请求，浏览器才继续发起正式请求。")])]),t._v(" "),s("h2",{attrs:{id:"http状态码301与302的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http状态码301与302的区别"}},[t._v("#")]),t._v(" Http状态码301与302的区别")]),t._v(" "),s("h3",{attrs:{id:"什么是301重定向？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是301重定向？"}},[t._v("#")]),t._v(" 什么是301重定向？")]),t._v(" "),s("p",[t._v("301重定向表示"),s("strong",[t._v("本网页永久性转移到另一个地址。SEO常用的招式，会把旧页面的PR等信息转移到新页面。")])]),t._v(" "),s("h3",{attrs:{id:"什么是302重定向？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是302重定向？"}},[t._v("#")]),t._v(" 什么是302重定向？")]),t._v(" "),s("p",[t._v("302重定向表示临时性转移，当一个网页URL需要短期变换时使用。")]),t._v(" "),s("h3",{attrs:{id:"区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("301重定向是永久的重定向，搜索引擎在抓取新内容的同时也将旧的网站替换为重定向之后的网址。")])]),t._v(" "),s("li",[s("strong",[t._v("302重定向是临时重定向，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。")])])]),t._v(" "),s("p",[s("strong",[t._v("301 意味着客户端可以对结果进行缓存，搜索引擎或者浏览器都可以把跳转后的地址缓存下来，下一次不必发送这个请求。302 就是客户端必须请求原链接。")])]),t._v(" "),s("h1",{attrs:{id:"questions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#questions"}},[t._v("#")]),t._v(" Questions")]),t._v(" "),s("h2",{attrs:{id:"为什么-http1-1-不能实现多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-http1-1-不能实现多路复用"}},[t._v("#")]),t._v(" 为什么 HTTP1.1 不能实现多路复用")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5eb7f811f265da7bbc7cc5bd",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解 HTTP 缓存"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/55623075",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解HTTP缓存控制之max-age=0、no-cache、no-store区别"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5c4528a6f265da611a4822cc",target:"_blank",rel:"noopener noreferrer"}},[t._v("实践这一次,彻底搞懂浏览器缓存机制"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/LuckyWinty/fe-weekly-questions/issues/3",target:"_blank",rel:"noopener noreferrer"}},[t._v("http2/http3协议有什么优劣"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/entry/5981c5df518825359a2b9476",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP1.0、HTTP1.1和HTTP2.0的区别"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000022522349",target:"_blank",rel:"noopener noreferrer"}},[t._v("web 下的性能优化1（网络方向）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5d105e1af265da1b71530095",target:"_blank",rel:"noopener noreferrer"}},[t._v("CDN 原理解析"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://yq.aliyun.com/articles/104041",target:"_blank",rel:"noopener noreferrer"}},[t._v("CDN 的基本原理和基础架构"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/44966787",target:"_blank",rel:"noopener noreferrer"}},[t._v("CDN 加速原理"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/Nk8YPYQDUJOKgQ9Qa7byag",target:"_blank",rel:"noopener noreferrer"}},[t._v("10种跨域解决方案"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/25707362",target:"_blank",rel:"noopener noreferrer"}},[t._v("正向代理与反向代理"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/anker/p/6056540.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("正向代理与反向代理总结"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5e6c58b06fb9a07ce01a4199",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域总结：从CORS到Nginx"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/amandakelake/blog/issues/62",target:"_blank",rel:"noopener noreferrer"}},[t._v("CORS 简单请求+预检请求"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/youngwind/blog/issues/108",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解 HTTPS: Charles 捕获 HTTPS 的原理"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/winwill2012/article/details/71774469",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTPS原理"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5edef7b2e51d45784213ca24",target:"_blank",rel:"noopener noreferrer"}},[t._v("对 options 请求的理解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5da188aa6fb9a04e1a3bbe80",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端渣渣对DNS的正确理解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5f18683af265da22f84d7602",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文入门DNS？从访问GitHub开始"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/249",target:"_blank",rel:"noopener noreferrer"}},[t._v("Http状态码301和302的应用场景分别是什么？"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/43789231",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底搞懂HTTPS的加密机制"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/6844903961506349064",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTPS 协议是如何保证安全的？"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);